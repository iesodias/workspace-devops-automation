name: Deploy Terraform to Azure

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: üîé Validar Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

        - name: Validar Sintaxe e Plano
        working-directory: infra
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          export TF_VAR_subscription_id=$ARM_SUBSCRIPTION_ID
          terraform init
          terraform fmt -check
          terraform validate
          terraform plan -out=tfplan
      

  deploy:
    name: üöÄ Deploy e Configura√ß√£o
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      vmName: ${{ steps.output_vm.outputs.vm_name }}
      adminUsername: ${{ steps.output_vm.outputs.admin_username }}
      publicIP: ${{ steps.output_vm.outputs.public_ip }}
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Exportar subscription_id para Terraform
        run: echo "TF_VAR_subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Aplicar Terraform
        working-directory: infra
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Capturar Outputs
        id: output_vm
        working-directory: infra
        run: |
          echo "vm_name=vm-automation" >> $GITHUB_OUTPUT
          echo "admin_username=azureuser" >> $GITHUB_OUTPUT
          ip=$(terraform output -raw public_ip_address)
          echo "public_ip=$ip" >> $GITHUB_OUTPUT

      - name: Definir Vari√°veis de Ambiente
        run: |
          echo "VM_NAME=vm-automation" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=azureuser" >> $GITHUB_ENV
          echo "PUBLIC_IP=${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh azureuser@${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV

      - name: Instalar Ansible e sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: Criar Invent√°rio Ansible
        run: |
          echo "[vm]" > inventory
          echo "${{ env.PUBLIC_IP }} ansible_user=${{ env.ADMIN_USERNAME }} ansible_password=${{ secrets.ADMIN_PASSWORD }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory

      - name: Executar Playbook Ansible
        run: |
          ansible-playbook -i inventory ansible/playbook.yml --extra-vars "ansible_sudo_pass=${{ secrets.ADMIN_PASSWORD }}"

  post-tests:
    name: ‚úÖ P√≥s-Testes de Infra
    needs: deploy
    runs-on: ubuntu-latest
    env:
      PUBLIC_IP: ${{ needs.deploy.outputs.publicIP }}
      VM_NAME: ${{ needs.deploy.outputs.vmName }}
    steps:
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Testar Swagger na Porta 8081
        run: |
          echo "Aguardando aplica√ß√£o subir com Swagger..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$PUBLIC_IP:8081/swagger-ui/index.html)
          if [ "$response" != "200" ]; then
            echo "‚ùå Swagger n√£o respondeu como esperado. Status HTTP: $response"
            exit 1
          else
            echo "‚úÖ Swagger dispon√≠vel em /swagger-ui/index.html na porta 8081!"
          fi

      - name: Verificar status da VM
        run: |
          status=$(az vm get-instance-view \
            --name "$VM_NAME" \
            --resource-group rg-vm-automation \
            --query "instanceView.statuses[?code=='PowerState/running'].displayStatus" \
            --output tsv)

          echo "Status da VM: $status"

          if [ "$status" != "VM running" ]; then
            echo "‚ùå A VM n√£o est√° em execu√ß√£o!"
            exit 1
          else
            echo "‚úÖ VM est√° rodando com sucesso!"
          fi

      - name: Verificar regra da NSG para porta 8081
        run: |
          result=$(az network nsg rule list \
            --nsg-name "nsg-vm" \
            --resource-group rg-vm-automation \
            --query "[?destinationPortRange=='8081' && access=='Allow']")

          if [ "$result" = "[]" ]; then
            echo "‚ùå Porta 8081 n√£o est√° liberada na NSG!"
            exit 1
          else
            echo "‚úÖ Porta 8081 est√° liberada corretamente na NSG!"
          fi
